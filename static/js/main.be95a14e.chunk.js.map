{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","config.ts","app/app-reducer.ts","utils/error-utils.ts","state/tasks-reducer.ts","state/todolist-reducer.ts","components/Task/Task.tsx","components/TodoList/TodoList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","settings","withCredentials","headers","instance","axios","create","baseURL","todolistAPI","get","post","todolistId","put","delete","taskId","apiModel","initialState","status","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","changeTaskEntityStatusAC","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","id","deadline","description","priority","startDate","then","res","resultCode","model","todoListId","updateTaskAC","catch","changeTodoListFilterAC","filter","changeTodolistEntityStatusAC","Task","onRemoveTaskClick","useCallback","removeTask","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","TodoList","useEffect","items","setTasksAC","useSelector","state","tasksForToDoList","useDispatch","addTask","item","addTaskAC","addTaskTC","changeTodoListTitle","changeTodoListTitleAC","updateTodolistTitleTC","removeTodoList","removeTodoListAC","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","removeTaskAC","removeTaskTC","style","listStyle","padding","map","Button","margin","size","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todolists","todoLists","addTodoList","todoList","addTodoListAC","addTodoListTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","spacing","tl","Paper","rootReducer","combineReducers","action","stateCopy","forEach","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be95a14e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {config} from \"../config\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": config.MY_SAMURAI_KEY\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgent = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    deadline: string\r\n    description: string\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, apiModel: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, apiModel)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick} disabled={props.disabled}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        !props.disabled && seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","export const config = {\r\n    MY_SAMURAI_KEY: \"199df811-bd09-48a1-81bc-ca38857c74a2\"\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> |\r\nReturnType<typeof setAppErrorAC>\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: ActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}","import { setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setAppErrorAC>>","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"./todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof updateTaskAC> |\r\n    ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof setTodolistsAC> |\r\n    ReturnType<typeof setTasksAC> |\r\n    ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks.map(t => ({...t, entityStatus: \"succeeded\"}))\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            stateCopy[action.task.todoListId] = [{...action.task, entityStatus: \"succeeded\"}, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE_TASK': {\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {\r\n                ...t,\r\n                entityStatus: action.entityStatus\r\n            } : t)\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD_TASK', task} as const\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return {type: 'UPDATE_TASK', taskId, model, todoListId} as const\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET_TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    deadline?: string\r\n    description?: string\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    status?: TaskStatuses\r\n    title?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: task.title,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type todoListActionType = ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC> |\r\n    ReturnType<typeof changeTodoListFilterAC> |\r\n    ReturnType<typeof setTodolistsAC> |\r\n    ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: todoListActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n        //To delete the tasks of the removed todoList, tasks-reducer.ts is used\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: \"succeeded\"\r\n            }))\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistDomainType = {...action.todoList, filter: 'all', entityStatus: \"succeeded\"}\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTodoListAC = (todoList: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todoList} as const //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter} as const\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const\r\n}\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.deleteTodolist(todoListId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const todoList = res.data.data.item\r\n                dispatch(addTodoListAC(todoList))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.updateTodolistTitle(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {TaskDomainType} from \"../../state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed} color={\"primary\"}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle} disabled={props.task.entityStatus === 'loading'}/>\r\n        <IconButton onClick={onRemoveTaskClick} disabled={props.task.entityStatus === 'loading'}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, TaskDomainType, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    updateTodolistTitleTC\r\n} from \"../../state/todolist-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log('TodoList is called')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[props.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(props.id, title))\r\n    }, [dispatch, props.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        dispatch(removeTodoListTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'all'))\r\n    }, [dispatch, props.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'active'))\r\n    }, [dispatch, props.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'completed'))\r\n    }, [dispatch, props.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskTC(taskId, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskId, {status}, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle} disabled={props.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                { tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                ) }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"../components/TodoList/TodoList\";\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListTC, fetchTodolistsTC, TodolistDomainType} from \"../state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\n\r\nfunction AppWithRedux() {\r\n    console.log('AppWithRedux is called')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Notes\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"15px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                            entityStatus={tl.entityStatus}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}