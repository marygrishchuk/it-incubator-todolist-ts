{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","id","isDone","type","changeTaskStatus","checked","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","newTask","todoList","taskId","find","task","tl","newTodoListID","tasksForToDoList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6df2e044.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={onAddItemClick}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {ChangeEvent} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListsId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    // const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value)}\r\n\r\n    const onAllFilterClick = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveFilterClick = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedFilterClick = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    const tasks = props.tasks.map(t => {\r\n\r\n            const onRemoveTaskClick = () => {\r\n                props.removeTask(t.id, props.id)\r\n            }\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n            }\r\n            const changeTitle = (title: string) => {\r\n                props.changeTaskTitle(t.id, title, props.id)\r\n            }\r\n\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\" onChange={changeStatus} checked={t.isDone}/>\r\n               <EditableSpan title={t.title} changeTitle={changeTitle}/>\r\n                {/*<span>{t.title}</span>*/}\r\n                <button onClick={onRemoveTaskClick}>x</button>\r\n            </li>\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>x</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active\" : \"\"}\r\n                        onClick={onAllFilterClick}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active\" : \"\"}\r\n                        onClick={onActiveFilterClick}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? \"active\" : \"\"}\r\n                        onClick={onCompletedFilterClick}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nfunction App() {\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = [newTask, ...todoList]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = todoList.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        let newTask = todoList.find(t => t.id === taskId)\r\n        if (newTask) {\r\n            newTask.isDone = isDone\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        const task = todoList.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = title\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n        // setFilter(value);\r\n    }\r\n    \r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks}) //перерисовка после удаления тасок удаленного тодолиста необязательна!\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID, title: title, filter: \"all\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({\r\n            ...tasks, [newTodoListID]: []\r\n        })\r\n    }  //добавляем и сам тодолист (в начало), и массив для его тасок!\r\n\r\n    function changeTodoListTitle(todoListId: string, title: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    let tasksForToDoList = tasks[tl.id];   //вариант для \"all\". И \"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                    if (tl.filter === \"completed\") {   //вариант для \"completed\"\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true)\r\n                    }\r\n                    if (tl.filter === \"active\") {      //вариант для \"active\"\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}   //\"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                            id={tl.id}    //\"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                            title={tl.title}\r\n                            tasks={tasksForToDoList}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            filter={tl.filter}  //нельзя просто filter, т.к. не будет меняться стиль кнопок фильтра\r\n                            removeTodoList={removeTodoList}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}