{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","id","className","isDone","Checkbox","changeTaskStatus","checked","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","padding","Button","margin","size","filter","changeFilter","initialState","AppWithReducers","todoLists","useSelector","state","dispatch","useDispatch","todoListId","type","addTaskAC","taskId","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterAC","removeTodoListAC","changeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","v1","spacing","tl","tasksForToDoList","item","Paper","elevation","rootReducer","combineReducers","action","stateCopy","newTask","task","find","newTodoList","todoList","store","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f21d47a3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./AppWithRedux\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListsId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    // const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value)}\r\n\r\n    const onAllFilterClick = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveFilterClick = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedFilterClick = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    debugger\r\n\r\n    const tasks = props.tasks.map(t => {\r\n\r\n            const onRemoveTaskClick = () => {\r\n                props.removeTask(t.id, props.id)\r\n            }\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n            }\r\n            const changeTitle = (title: string) => {\r\n                props.changeTaskTitle(t.id, title, props.id)\r\n            }\r\n\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox onChange={changeStatus} checked={t.isDone} color={\"primary\"}/>\r\n                <EditableSpan title={t.title} changeTitle={changeTitle}/>\r\n                <IconButton onClick={onRemoveTaskClick}><Delete/></IconButton>\r\n            </li>\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {TasksStateType, TaskType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolist-reducer\";\r\n\r\nexport type ActionType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    AddTodolistActionType | RemoveTodolistActionType\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false};\r\n            const tasks = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            let task = state[action.todoListId].find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.isDone = action.isDone\r\n                return {...state}\r\n            }\r\n            return state\r\n        }\r\n        case 'CHANGE_TASK_TITLE':\r\n            let task = state[action.todoListId].find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.title = action.title\r\n                return {...state}\r\n            }\r\n            return state\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoListId]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTaskAC = (title: string, todoListId: string) => {\r\n    return {type: 'ADD_TASK', title, todoListId} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, isDone, todoListId} as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todoListId} as const\r\n}","import {FilterValuesType, TodoListType} from \"../AppWithRedux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\nexport type ActionType = ChangeTodolistFilterActionType | ChangeTodolistTitleActionType | AddTodolistActionType |RemoveTodolistActionType\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n            //To delete the tasks of the removed todoList, tasks-reducer.ts is used\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodoListType = {\r\n                id: action.todoListId, title: action.title, filter: \"all\"\r\n            }\r\n            return [newTodoList, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n                return [...state]\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTodoListAC = (todoListTitle: string, todoListId:string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: todoListTitle, todoListId} //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title}\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter}\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {addTodoListAC, changeTodoListFilterAC, changeTodoListTitleAC, removeTodoListAC} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nfunction AppWithReducers() {\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    //useSelector receives state by default\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let dispatch = useDispatch()\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        dispatch(addTaskAC(title, todoListId))\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        dispatch(removeTaskAC(taskId, todoListId))\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, todoListId: string) {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(todoListId, value))\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        dispatch(removeTodoListAC(todoListId))  //only 1 needed\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const id = v1()\r\n        dispatch(addTodoListAC(title, id))      //only 1 needed\r\n    }\r\n\r\n    function changeTodoListTitle(todoListId: string, title: string) {\r\n        dispatch(changeTodoListTitleAC(todoListId, title))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Notes\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"15px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n\r\n                            let tasksForToDoList = tasks[tl.id];\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true)\r\n                            }\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForToDoList}\r\n                                            addTask={addTask}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithReducers;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer);\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}