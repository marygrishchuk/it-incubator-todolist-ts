{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","id","className","isDone","Checkbox","changeTaskStatus","checked","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","padding","Button","margin","size","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","newTask","todoList","taskId","find","task","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","newTodoListID","spacing","tasksForToDoList","item","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.94c912ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {ChangeEvent} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListsId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    // const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value)}\r\n\r\n    const onAllFilterClick = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const onActiveFilterClick = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const onCompletedFilterClick = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    const tasks = props.tasks.map(t => {\r\n\r\n            const onRemoveTaskClick = () => {\r\n                props.removeTask(t.id, props.id)\r\n            }\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n            }\r\n            const changeTitle = (title: string) => {\r\n                props.changeTaskTitle(t.id, title, props.id)\r\n            }\r\n\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox onChange={changeStatus} checked={t.isDone} color={\"primary\"}/>\r\n                <EditableSpan title={t.title} changeTitle={changeTitle}/>\r\n                <IconButton onClick={onRemoveTaskClick}><Delete/></IconButton>\r\n            </li>\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nfunction App() {\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = [newTask, ...todoList]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = todoList.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        let newTask = todoList.find(t => t.id === taskId)\r\n        if (newTask) {\r\n            newTask.isDone = isDone\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        const task = todoList.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = title\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID, title: title, filter: \"all\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({\r\n            ...tasks, [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTodoListTitle(todoListId: string, title: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"15px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n\r\n                            let tasksForToDoList = tasks[tl.id];\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true)\r\n                            }\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForToDoList}\r\n                                            addTask={addTask}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}