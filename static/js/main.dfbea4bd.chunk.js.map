{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","Task.tsx","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","initialState","changeTodoListFilterAC","todoListId","filter","type","id","Task","onRemoveTaskClick","useCallback","removeTask","task","changeStatus","changeTaskStatus","checked","changeTaskTitle","className","isDone","Checkbox","Delete","TodoList","tasks","useSelector","state","tasksForToDoList","t","dispatch","useDispatch","addTask","addTaskAC","changeTodoListTitle","changeTodoListTitleAC","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","taskId","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","style","listStyle","padding","map","Button","margin","size","AppWithRedux","todoLists","addTodoList","v1","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","tl","item","Paper","elevation","rootReducer","combineReducers","action","stateCopy","newTask","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dfbea4bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {addTodoListAC, removeTodoListAC} from \"./todolist-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC>\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false};\r\n            const tasks = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            const stateCopy = {...state}\r\n            let task = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = task.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE_TASK_TITLE':\r\n            const stateCopy = {...state}\r\n            let task = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = task.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoListId]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTaskAC = (title: string, todoListId: string) => {\r\n    return {type: 'ADD_TASK', title, todoListId} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, isDone, todoListId} as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todoListId} as const\r\n}","export type todoListActionType = ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC> |\r\n    ReturnType<typeof changeTodoListFilterAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodoListType> = initialState, action: todoListActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n            //To delete the tasks of the removed todoList, tasks-reducer.ts is used\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodoListType = {\r\n                id: action.todoListId, title: action.title, filter: \"all\"\r\n            }\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTodoListAC = (todoListTitle: string, todoListId:string) => {\r\n    return {type: 'ADD-TODOLIST', title: todoListTitle, todoListId} as const //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter} as const\r\n}","import {TaskType} from \"./state/tasks-reducer\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.isDone} color={\"primary\"}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle}/>\r\n        <IconButton onClick={onRemoveTaskClick}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TaskType} from \"./state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType,\r\n    removeTodoListAC\r\n} from \"./state/todolist-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log('TodoList is called')\r\n    let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.isDone === true)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.isDone === false)\r\n    }\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskAC(title, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleAC(props.id, title))\r\n    }, [dispatch, props.id])\r\n\r\n    const removeTodoList = () => dispatch(removeTodoListAC(props.id))\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'all'))\r\n    }, [dispatch, props.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'active'))\r\n    }, [dispatch, props.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'completed'))\r\n    }, [dispatch, props.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskAC(taskId, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                { tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                ) }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListAC, TodoListType} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nfunction AppWithRedux() {\r\n    console.log('AppWithRedux is called')\r\n    let todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const id = v1()\r\n        dispatch(addTodoListAC(title, id))      //only 1 needed\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Notes\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"15px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer);\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}