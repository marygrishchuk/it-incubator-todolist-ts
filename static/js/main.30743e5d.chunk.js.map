{"version":3,"sources":["serviceWorker.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/todolist-api.ts","config.ts","utils/error-utils.ts","state/todolist-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","state/tasks-reducer.ts","features/Task/Task.tsx","features/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","status","error","setAppStatusAC","type","setAppErrorAC","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","todolistAPI","get","title","post","todolistId","put","delete","taskId","apiModel","handleServerAppError","data","messages","length","handleServerNetworkError","message","changeTodoListFilterAC","todoListId","filter","id","changeTodolistEntityStatusAC","entityStatus","AddItemForm","React","memo","console","log","useState","setTitle","setError","onAddItemClick","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","deadline","description","priority","startDate","then","res","resultCode","model","updateTaskAC","catch","Task","onRemoveTaskClick","useCallback","removeTask","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","TodoList","todolist","demo","useEffect","items","setTasksAC","tasksForToDoList","addTask","item","addTaskAC","addTaskTC","changeTodoListTitle","changeTodoListTitleAC","updateTodolistTitleTC","removeTodoList","removeTodoListAC","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","removeTaskAC","removeTaskTC","style","listStyle","padding","map","Button","margin","size","TodolistsList","todolists","todoLists","addTodoList","todoList","addTodoListAC","addTodoListTC","Grid","container","spacing","tl","Paper","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","action","stateCopy","forEach","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30743e5d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> |\r\nReturnType<typeof setAppErrorAC>\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: ActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport {config} from \"../config\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": config.MY_SAMURAI_KEY\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgent = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    deadline: string\r\n    description: string\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, apiModel: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, apiModel)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n","export const config = {\r\n    MY_SAMURAI_KEY: \"199df811-bd09-48a1-81bc-ca38857c74a2\"\r\n}","import { setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setAppErrorAC>>","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type todoListActionType = ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC> |\r\n    ReturnType<typeof changeTodoListFilterAC> |\r\n    ReturnType<typeof setTodolistsAC> |\r\n    ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: todoListActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n        //To delete the tasks of the removed todoList, tasks-reducer.ts is used\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: \"succeeded\"\r\n            }))\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistDomainType = {...action.todoList, filter: 'all', entityStatus: \"succeeded\"}\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTodoListAC = (todoList: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todoList} as const //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter} as const\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const\r\n}\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.deleteTodolist(todoListId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const todoList = res.data.data.item\r\n                dispatch(addTodoListAC(todoList))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.updateTodolistTitle(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick} disabled={props.disabled}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        !props.disabled && seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"./todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof updateTaskAC> |\r\n    ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof setTodolistsAC> |\r\n    ReturnType<typeof setTasksAC> |\r\n    ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks.map(t => ({...t, entityStatus: \"succeeded\"}))\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            stateCopy[action.task.todoListId] = [{...action.task, entityStatus: \"succeeded\"}, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE_TASK': {\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {\r\n                ...t,\r\n                entityStatus: action.entityStatus\r\n            } : t)\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD_TASK', task} as const\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return {type: 'UPDATE_TASK', taskId, model, todoListId} as const\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET_TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    deadline?: string\r\n    description?: string\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    status?: TaskStatuses\r\n    title?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: task.title,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {TaskDomainType} from \"../../state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed} color={\"primary\"}\r\n                  disabled={props.task.entityStatus === 'loading'}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle}\r\n                      disabled={props.task.entityStatus === 'loading'}/>\r\n        <IconButton onClick={onRemoveTaskClick} disabled={props.task.entityStatus === 'loading'}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, TaskDomainType, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    removeTodoListTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../../state/todolist-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({todolist, demo = false}: PropsType) => {\r\n    console.log('TodoList is called')\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [])\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todolist.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (todolist.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(todolist.id, title))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        dispatch(removeTodoListTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'all'))\r\n    }, [dispatch, todolist.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'active'))\r\n    }, [dispatch, todolist.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'completed'))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoListTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList}\r\n                            disabled={todolist.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                {tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {addTodoListTC, fetchTodolistsTC, TodolistDomainType} from \"../../state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList = React.memo(({demo = false}: TodolistsListPropsType) => {\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"15px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log('App is called')\r\n\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Notes\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList demo={demo}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}