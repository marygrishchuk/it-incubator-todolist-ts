{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","config.ts","state/tasks-reducer.ts","state/todolist-reducer.ts","Task.tsx","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","settings","withCredentials","headers","instance","axios","create","baseURL","todolistAPI","get","post","todolistId","put","delete","taskId","status","initialState","changeTodoListFilterAC","todoListId","filter","type","id","Task","onRemoveTaskClick","useCallback","removeTask","task","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","TodoList","useEffect","dispatch","then","res","tasks","data","items","setTasksAC","useSelector","state","tasksForToDoList","t","useDispatch","addTask","resultCode","item","addTaskAC","catch","err","warn","addTaskTC","changeTodoListTitle","changeTodoListTitleAC","updateTodolistTitleTC","removeTodoList","removeTodoListAC","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","removeTaskAC","removeTaskTC","getState","find","changeTaskStatusAC","updateTaskStatusTC","changeTaskTitleAC","updateTaskTitleTC","style","listStyle","padding","map","Button","margin","size","AppWithRedux","todolists","todoLists","addTodoList","todoList","addTodoListAC","addTodoListTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","tl","Paper","elevation","rootReducer","combineReducers","action","stateCopy","forEach","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c33fcd89.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {config} from \"../config\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": config.MY_SAMURAI_KEY\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgent = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTaskTitle(todolistId: string, taskId: string, title: string) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, {title})\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, title: string, status: number) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, {title, status})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        seEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            seEditMode(false)\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","export const config = {\r\n    MY_SAMURAI_KEY: \"199df811-bd09-48a1-81bc-ca38857c74a2\"\r\n}","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"./todolist-reducer\";\r\nimport {TaskStatuses, TaskType, todolistAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof setTodolistsAC> |\r\n    ReturnType<typeof setTasksAC>\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            const stateCopy = {...state}\r\n            let task = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = task.map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE_TASK_TITLE':\r\n            const stateCopy = {...state}\r\n            let task = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = task.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD_TASK', task} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, status, todoListId} as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => {\r\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todoListId} as const\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET_TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            }\r\n        }).catch(err => console.warn(err))\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            }\r\n        }).catch(err => console.warn(err))\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (task) {\r\n        todolistAPI.updateTaskStatus(todolistId, taskId, task.title, status)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                }\r\n            }).catch(err => console.warn(err))\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (taskId: string, title: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTaskTitle(todoListId, taskId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n                }\r\n            }).catch(err => console.warn(err))\r\n}\r\n","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeTaskTitleAC} from \"./tasks-reducer\";\r\n\r\nexport type todoListActionType = ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC> |\r\n    ReturnType<typeof changeTodoListFilterAC> |\r\n    ReturnType<typeof setTodolistsAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: todoListActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n        //To delete the tasks of the removed todoList, tasks-reducer.ts is used\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistDomainType = {...action.todoList, filter: 'all'}\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//if we add empty cases there will be a TypeScript error: Object (inside test file) is possibly undefined.\r\n\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\n//we will make server requests from action creators!\r\n\r\nexport const addTodoListAC = (todoList: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todoList} as const //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter} as const\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        }).catch(err => console.warn(err))\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodolist(todoListId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n            }\r\n        }).catch(err => console.warn(err))\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const todoList = res.data.data.item\r\n                dispatch(addTodoListAC(todoList))\r\n            }\r\n        }).catch(err => console.warn(err))\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolistTitle(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n            }\r\n        }).catch(err => console.warn(err))\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed} color={\"primary\"}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle}/>\r\n        <IconButton onClick={onRemoveTaskClick}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"./state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    updateTodolistTitleTC,\r\n    FilterValuesType,\r\n    removeTodoListTC\r\n} from \"./state/todolist-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log('TodoList is called')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(props.id, title))\r\n    }, [dispatch, props.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        dispatch(removeTodoListTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'all'))\r\n    }, [dispatch, props.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'active'))\r\n    }, [dispatch, props.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(props.id, 'completed'))\r\n    }, [dispatch, props.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskTC(taskId, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskStatusTC(taskId, status, props.id))\r\n    }, [dispatch, props.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateTaskTitleTC(taskId, title, props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                { tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                ) }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListTC, fetchTodolistsTC, TodolistDomainType} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nfunction AppWithRedux() {\r\n    console.log('AppWithRedux is called')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Notes\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"15px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}