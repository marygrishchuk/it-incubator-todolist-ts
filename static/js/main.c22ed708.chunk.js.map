{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","config.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodoList/todolist-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Task/tasks-reducer.ts","features/Task/Task.tsx","features/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","app/App.tsx","state/store.ts","index.tsx","app/App.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","todolistAPI","get","title","post","todolistId","put","delete","taskId","apiModel","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","stateDraft","action","authReducer","reducer","actions","status","isInitialized","setIsInitializedAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","removeTodoListAC","index","findIndex","tl","id","splice","addTodoListAC","unshift","filter","entityStatus","changeTodoListTitleAC","todoListId","changeTodoListFilterAC","setTodolistsAC","map","changeTodolistEntityStatusAC","todoListReducer","AddItemForm","React","memo","console","log","requestStatus","useState","setTitle","setError","onAddItemClick","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","removeTaskAC","tasks","t","addTaskAC","updateTaskAC","model","setTasksAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","task","find","deadline","description","priority","startDate","then","res","resultCode","catch","Task","onRemoveTaskClick","useCallback","removeTask","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","TodoList","todolist","demo","useEffect","items","tasksForToDoList","addTask","item","addTaskTC","changeTodoListTitle","updateTodolistTitleTC","removeTodoList","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","removeTaskTC","style","listStyle","padding","Button","margin","size","TodolistsList","auth","todoLists","addTodoList","todoList","addTodoListTC","Grid","container","spacing","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","type","getFieldProps","touched","FormControlLabel","control","App","logout","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","s","progress","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c22ed708.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {config} from \"../config\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": config.MY_SAMURAI_KEY\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgent = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, apiModel: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, apiModel)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthUserData>>(`auth/me`)\r\n    },\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    deadline: string\r\n    description: string\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","export const config = {\r\n    MY_SAMURAI_KEY: \"199df811-bd09-48a1-81bc-ca38857c74a2\"\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(stateDraft, action: PayloadAction<boolean>) {\r\n            stateDraft.isLoggedIn = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// actions\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type AuthInitialStateType = typeof initialState","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppStatusAC(stateDraft, action: PayloadAction<RequestStatusType>){\r\n            stateDraft.status = action.payload\r\n        },\r\n        setAppErrorAC(stateDraft, action: PayloadAction<string | null>){\r\n            stateDraft.error = action.payload\r\n        },\r\n        setIsInitializedAC(stateDraft, action: PayloadAction<boolean>){\r\n            stateDraft.isInitialized = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n//action creators\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodoListAC(stateDraft, action: PayloadAction<string>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload)\r\n            if (index > -1) {\r\n                stateDraft.splice(index, 1)\r\n            }\r\n        },\r\n        addTodoListAC(stateDraft, action: PayloadAction<TodolistType>) {\r\n            stateDraft.unshift({...action.payload, filter: 'all', entityStatus: \"succeeded\"})\r\n        },\r\n        changeTodoListTitleAC(stateDraft, action: PayloadAction<{ todoListId: string, title: string }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.todoListId)\r\n            stateDraft[index].title = action.payload.title\r\n        },\r\n        changeTodoListFilterAC(stateDraft, action: PayloadAction<{ todoListId: string, filter: FilterValuesType }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.todoListId)\r\n            stateDraft[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC(stateDraft, action: PayloadAction<Array<TodolistType>>) {\r\n            return action.payload.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: \"succeeded\"\r\n            }))\r\n        },\r\n        changeTodolistEntityStatusAC(stateDraft, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.id)\r\n            stateDraft[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\n//action creators\r\nexport const {\r\n    removeTodoListAC,\r\n    addTodoListAC,\r\n    changeTodoListTitleAC,\r\n    changeTodoListFilterAC,\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTodolist(todoListId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const todoList = res.data.data.item\r\n                dispatch(addTodoListAC(todoList))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'loading'}))\r\n    todolistAPI.updateTodolistTitle(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC({todoListId, title}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'failed'}))\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'failed'}))\r\n    })\r\n}\r\n\r\n//types\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            if (requestStatus === 'succeeded') setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick} disabled={props.disabled}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        !props.disabled && seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n        if (requestStatus === 'succeeded') seEditMode(false)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n            if (requestStatus === 'succeeded') seEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"../TodoList/todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(stateDraft, action: PayloadAction<{ taskId: string, todoListId: string }>) {\r\n            const tasks = stateDraft[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(stateDraft, action: PayloadAction<TaskType>) {\r\n            stateDraft[action.payload.todoListId].unshift({...action.payload, entityStatus: \"succeeded\"})\r\n        },\r\n        updateTaskAC(stateDraft, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todoListId: string }>) {\r\n            const tasks = stateDraft[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(stateDraft, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            stateDraft[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: \"succeeded\"}))\r\n        },\r\n        changeTaskEntityStatusAC(stateDraft, action: PayloadAction<{ taskId: string, todolistId: string, entityStatus: RequestStatusType }>) {\r\n            const tasks = stateDraft[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (stateDraft, action) => {\r\n            stateDraft[action.payload.id] = []\r\n        })\r\n        builder.addCase(removeTodoListAC, (stateDraft, action) => {\r\n            delete stateDraft[action.payload]\r\n        })\r\n        builder.addCase(setTodolistsAC, (stateDraft, action) => {\r\n            action.payload.forEach((tl) => {\r\n                stateDraft[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n//action creators\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskEntityStatusAC} = slice.actions\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC({taskId, todoListId: todolistId}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                title: task.title,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC({taskId, model: domainModel, todoListId: todolistId}))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'succeeded'}))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'failed'}))\r\n                    }\r\n                }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'failed'}))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    deadline?: string\r\n    description?: string\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    status?: TaskStatuses\r\n    title?: string\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {TaskDomainType} from \"./tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed} color={\"primary\"}\r\n                  disabled={props.task.entityStatus === 'loading'}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle}\r\n                      disabled={props.task.entityStatus === 'loading'}/>\r\n        <IconButton onClick={onRemoveTaskClick} disabled={props.task.entityStatus === 'loading'}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, TaskDomainType, updateTaskTC} from \"../Task/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    removeTodoListTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./todolist-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({todolist, demo = false}: PropsType) => {\r\n    console.log('TodoList is called')\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [])\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todolist.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (todolist.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(todolist.id, title))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        dispatch(removeTodoListTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC({todoListId: todolist.id, filter: 'all'}))\r\n    }, [dispatch, todolist.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC({todoListId: todolist.id, filter: 'active'}))\r\n    }, [dispatch, todolist.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC({todoListId: todolist.id, filter: 'completed'}))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoListTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList}\r\n                            disabled={todolist.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                {tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {addTodoListTC, fetchTodolistsTC, TodolistDomainType} from \"../TodoList/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList = React.memo(({demo = false}: TodolistsListPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"15px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password should contain more than 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) return <Redirect to={'/'}/>\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in, please get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or please use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"*Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"*Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport s from './App.module.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {InitialAppStateType, initializeAppTC} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log('App is called')\r\n\r\n    let {status, isInitialized} = useSelector<AppRootStateType, InitialAppStateType>(state => state.app)\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        <span style={{margin: '15px'}}>Notes</span>\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{position: 'relative'}}>\r\n                {status === 'loading' && <div className={s.progress}><LinearProgress color=\"secondary\"/></div>}\r\n            </div>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import {tasksReducer} from '../features/Task/tasks-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport {todoListReducer} from \"../features/TodoList/todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// explicit store creation\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n});\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"App_progress__3J7Qh\"};"],"sourceRoot":""}