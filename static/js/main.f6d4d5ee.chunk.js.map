{"version":3,"sources":["serviceWorker.ts","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","tasks","map","t","key","className","isDone","type","onChange","e","changeTaskStatus","currentTarget","checked","onClick","removeTask","removeTodoList","value","onKeyPress","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","newTask","todoList","taskId","find","tl","tasksForToDoList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f6d4d5ee.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {ChangeEvent, KeyboardEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListsId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState <string>(\"\")\r\n    const [error, setError] = useState <string | null>(null)\r\n\r\n    const addTask = () => {\r\n        //можно вставлять доп.проверки на нецензурные слова:\r\n        //if (title.trim() === \"kakashka\") {\r\n        //     return;         //выход из функции addTask, чтоб дальше не выполнилась\r\n        // }\r\n        if (title.trim()) {\r\n            props.addTask(title.trim(), props.id)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onAddTaskKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if(e.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value)}\r\n    const onAllFilterClick = () => {props.changeFilter('all', props.id)}\r\n    const onActiveFilterClick = () => {props.changeFilter('active', props.id)}\r\n    const onCompletedFilterClick = () => {props.changeFilter('completed', props.id)}\r\n\r\n    const tasks = props.tasks.map( t => {\r\n\r\n            const onRemoveTaskClick = () => {props.removeTask(t.id, props.id)}\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)}\r\n\r\n            return <li key={t.id} className={t.isDone? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\" onChange={changeStatus} checked={t.isDone}/> <span>{t.title}</span>\r\n                <button onClick={ onRemoveTaskClick }>x</button>\r\n            </li>\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}<button onClick={removeTodoList}>x</button></h3>\r\n        <div>\r\n            <input\r\n                value={title}\r\n                onChange={ onChangeTitle }\r\n                onKeyPress={ onAddTaskKeyPress }\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={ addTask }>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n        <ul>\r\n            { tasks }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === \"all\" ? \"active\" : \"\"}\r\n                onClick={ onAllFilterClick }>All</button>\r\n            <button className={props.filter === \"active\" ? \"active\" : \"\"}\r\n                onClick={ onActiveFilterClick }>Active</button>\r\n            <button className={props.filter === \"completed\" ? \"active\" : \"\"}\r\n                onClick={ onCompletedFilterClick }>Completed</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nfunction App() {   //этот стейт нам уже не нужен (вместо него сделаем 2)\r\n                   // const [tasks, setTasks] = useState<Array<TaskType>>([\r\n                   //     {id: v1(), title: \"HTML\", isDone: true},\r\n                   //     {id: v1(), title: \"CSS\", isDone: true},\r\n                   //     {id: v1(), title: \"JS\", isDone: false},\r\n                   //     {id: v1(), title: \"Redux\", isDone: false},\r\n                   //     {id: v1(), title: \"Rest API\", isDone: false}\r\n                   // ]);\r\n\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    // console.log(tasks[todoListId1][0].title)  // в консоли будет HTML\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = [newTask, ...todoList]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        tasks[todoListId] = todoList.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        const todoList = tasks[todoListId]\r\n        let newTask = todoList.find(t => t.id === taskId)\r\n        if (newTask) {\r\n            newTask.isDone = isDone\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n//Альтернатива с .map:\r\n    // function changeTaskStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n    //     const todoList = tasks[todoListId]\r\n    //     let newTodoList = todoList.map(t => {\r\n    //         if (t.id === taskId) {\r\n    //             return {...t, isDone: isDone}\r\n    //         }\r\n    //         return t\r\n    //     })\r\n    //     tasks[todoListId] = newTodoList\r\n    //     setTasks({...tasks})\r\n    // }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n        // setFilter(value);\r\n    }\r\n    \r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks}) //перерисовка после удаления тасок удаленного тодолиста необязательна!\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    let tasksForToDoList = tasks[tl.id];   //вариант для \"all\". И \"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                    if (tl.filter === \"completed\") {   //вариант для \"completed\"\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true)\r\n                    }\r\n                    if (tl.filter === \"active\") {      //вариант для \"active\"\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}   //\"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                            id={tl.id}    //\"tl.id\" = todoListId1 либо todoListId2 (он же - Массив)\r\n                            title={tl.title}\r\n                            tasks={tasksForToDoList}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            filter={tl.filter}  //нельзя просто filter, т.к. не будет меняться стиль кнопок фильтра\r\n                            removeTodoList={removeTodoList}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}