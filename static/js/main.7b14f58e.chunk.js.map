{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","config.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodoList/todolist-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Task/tasks-reducer.ts","features/Task/Task.tsx","features/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","app/App.tsx","state/store.ts","index.tsx","app/App.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","todolistAPI","get","title","post","todolistId","put","delete","taskId","apiModel","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","changeTodoListFilterAC","todoListId","filter","id","changeTodolistEntityStatusAC","entityStatus","AddItemForm","React","memo","console","log","requestStatus","useState","setTitle","setError","onAddItemClick","trim","addItem","TextField","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","seEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","deadline","description","priority","startDate","then","res","resultCode","model","updateTaskAC","catch","Task","onRemoveTaskClick","useCallback","removeTask","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","TodoList","todolist","demo","useEffect","items","setTasksAC","tasksForToDoList","addTask","item","addTaskAC","addTaskTC","changeTodoListTitle","changeTodoListTitleAC","updateTodolistTitleTC","removeTodoList","removeTodoListAC","onAllFilterClick","onActiveFilterClick","onCompletedFilterClick","removeTaskAC","removeTaskTC","style","listStyle","padding","map","Button","margin","size","TodolistsList","auth","todolists","todoLists","addTodoList","todoList","addTodoListAC","addTodoListTC","Grid","container","spacing","tl","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","FormControlLabel","control","App","logout","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","s","progress","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","stateCopy","forEach","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7b14f58e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {config} from \"../config\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": config.MY_SAMURAI_KEY\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgent = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, apiModel: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, apiModel)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthUserData>>(`auth/me`)\r\n    },\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    deadline: string\r\n    description: string\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","export const config = {\r\n    MY_SAMURAI_KEY: \"199df811-bd09-48a1-81bc-ca38857c74a2\"\r\n}","import {AppActionsType, setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<AppActionsType>","import {Dispatch} from 'redux'\r\nimport {AppActionsType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkDispatch = Dispatch<ReturnType<typeof setIsLoggedInAC> | AppActionsType>","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppActionsType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: TodoListActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)  //filter creates new array\r\n        //the tasks of the removed todoList will be removed using tasks-reducer.ts\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: \"succeeded\"\r\n            }))\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistDomainType = {...action.todoList, filter: 'all', entityStatus: \"succeeded\"}\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId} as const\r\n}\r\n\r\nexport const addTodoListAC = (todoList: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todoList} as const //NEVER create IDs for new todolists in ActionCreators!\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter} as const\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.deleteTodolist(todoListId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const todoList = res.data.data.item\r\n                dispatch(addTodoListAC(todoList))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.updateTodolistTitle(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'failed'))\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(changeTodolistEntityStatusAC(todoListId, 'failed'))\r\n    })\r\n}\r\n\r\n//types\r\nexport type TodoListActionType =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<TodoListActionType | AppActionsType>","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    //local state which is necessary only for this component\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            if (requestStatus === 'succeeded') setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick} disabled={props.disabled}><AddBox/></IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const [editMode, seEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        !props.disabled && seEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n        if (requestStatus === 'succeeded') seEditMode(false)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            if (title.trim()) {\r\n                props.changeTitle(title.trim())\r\n            }\r\n            if (requestStatus === 'succeeded') seEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterKeyPress}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"../TodoList/todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {AppActionsType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nlet initialState: TasksStateType = {}   //associative array\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks.map(t => ({...t, entityStatus: \"succeeded\"}))\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            stateCopy[action.task.todoListId] = [{...action.task, entityStatus: \"succeeded\"}, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE_TASK': {\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todoListId]\r\n            stateCopy[action.todoListId] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {\r\n                ...t,\r\n                entityStatus: action.entityStatus\r\n            } : t)\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: 'REMOVE_TASK', taskId, todoListId} as const  //if key = value, no need to write both 'todoListId: todoListId'\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD_TASK', task} as const\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return {type: 'UPDATE_TASK', taskId, model, todoListId} as const\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET_TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                title: task.title,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'failed'))\r\n                    }\r\n                }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'failed'))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nexport type TaskActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    deadline?: string\r\n    description?: string\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    status?: TaskStatuses\r\n    title?: string\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<TaskActionType | AppActionsType>","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {TaskDomainType} from \"./tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        props.removeTask(props.task.id)\r\n    }, [props.removeTask, props.task.id])\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title)\r\n    }, [props.changeTaskTitle, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed} color={\"primary\"}\r\n                  disabled={props.task.entityStatus === 'loading'}/>\r\n        <EditableSpan title={props.task.title} changeTitle={changeTitle}\r\n                      disabled={props.task.entityStatus === 'loading'}/>\r\n        <IconButton onClick={onRemoveTaskClick} disabled={props.task.entityStatus === 'loading'}><Delete/></IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC, removeTaskTC, TaskDomainType, updateTaskTC} from \"../Task/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    removeTodoListTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./todolist-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({todolist, demo = false}: PropsType) => {\r\n    console.log('TodoList is called')\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [])\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todolist.id])\r\n\r\n    let tasksForToDoList = tasks\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (todolist.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(todolist.id, title))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        dispatch(removeTodoListTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onAllFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'all'))\r\n    }, [dispatch, todolist.id])\r\n    const onActiveFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'active'))\r\n    }, [dispatch, todolist.id])\r\n    const onCompletedFilterClick = useCallback(() => {\r\n        dispatch(changeTodoListFilterAC(todolist.id, 'completed'))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const onRemoveTaskClick = useCallback((taskId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoListTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList}\r\n                            disabled={todolist.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: \"none\", padding: \"0\"}}>\r\n                {tasksForToDoList.map(t => <Task\r\n                        key={t.id}\r\n                        removeTask={onRemoveTaskClick}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllFilterClick}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveFilterClick}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{margin: \"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedFilterClick}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {addTodoListTC, fetchTodolistsTC, TodolistDomainType} from \"../TodoList/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList = React.memo(({demo = false}: TodolistsListPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"15px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password should contain more than 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) return <Redirect to={'/'}/>\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in, please get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or please use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"*Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"*Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport s from './App.module.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {InitialAppStateType, initializeAppTC} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log('App is called')\r\n\r\n    let {status, isInitialized} = useSelector<AppRootStateType, InitialAppStateType>(state => state.app)\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        <span style={{margin: '15px'}}>Notes</span>\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <div className={s.progress}><LinearProgress color=\"secondary\"/></div>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import {tasksReducer} from '../features/Task/tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListReducer} from \"../features/TodoList/todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// while uniting reducers with combineReducers,\r\n// we create the structure of our single state object\r\nconst rootReducer = combineReducers({  //this is the state!\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// explicit store creation\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// automatic type definition for the entire state\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// needed to call store from browser console at any time\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"App_progress__3J7Qh\"};"],"sourceRoot":""}